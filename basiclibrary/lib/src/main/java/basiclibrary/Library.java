/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Arrays;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static void main(String[] args) {
        //  int[] array = {1, 2, 2, 20};
        //  calculateAverage(array);
        //roll(4);
        // System.out.print(containsDuplicates(array));

//        int[][] array = {
//                {66, 64, 58, 65, 71, 57, 60},
//                {57, 65, 65, 70, 72, 65, 51},
//                {55, 54, 60, 53, 59, 57, 61},
//                {65, 56, 55, 52, 55, 62, 57}
//        };
//
//        calculateAverageOfTwoArrays(array);

    }

    public static int[] roll(int num) {
        int[] array = new int[num];
        for (int i = 0; i < num; i ++){
            array[i] = (int) (Math.random() * 6);}
        System.out.print((Arrays.toString(array)));


        return array;
    }

    public static boolean  containsDuplicates (int[] array) {
        for (int i=0; i<array.length; i++){
            for (int j=i+1; j<array.length; j++){
                if (array[i]==array[j]){
                    return true;
                }
            }
        }
        return false;


    }

    public static float calculateAverage (int[] array) {
        float total = 0;

        for (int i=0; i<array.length; i++){
            total = total + array[i];

        }

        float average = total/array.length;
        System.out.println("The average is: "+average);

        return average;

    }

    public static float calculateAverageOfTwoArrays (int[][] array) {

        float[] averageArray = new float[array.length];
        for (int i=0; i<array.length; i++){
            averageArray[i] = calculateAverage(array[i]);
        }

        float lowest =averageArray[0];
        for (int i=0; i<averageArray.length; i++ ){
            if(averageArray[i]<lowest){
                lowest=averageArray[i];
            }
        }
        System.out.print("the lowest Average is: "+ lowest);




        return lowest;

    }





    }
